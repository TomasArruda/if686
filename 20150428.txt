trabalho

1)foldr (+).(.).map

foldr :: (a -> b -> b) -> b -> [a] -> b
(+) :: (Num a) => a -> a -> a
(.) :: (b->c) -> (a->b) -> a -> c
map :: (a->b) -> [a] ->[b]


foldr :: (a -> b -> b) -> (b -> [a] -> b)
(a -> b -> b ) = (+).(.).map

(+) :: (Num a) => a -> (a -> a)
(.) :: (c->d) -> ((b->c) -> b -> d)
map :: (e->f) -> ([e] ->[f])

(+).((.).map)

((.).map)
(.) :: (c->d) -> ((b->c) -> b -> d)
map :: (e->f) -> ([e] ->[f])
(.) :: (h->i) -> ((g->h) -> g -> i)

g = (e->f)
h = (c->d) = ([e]-> [f])
i = ((b->c) -> b -> d)
c = [e]
d = [f]

i = (b->[e]) -> b -> [f]
g -> i = (e->f) -> (b->[e]) -> b -> [f]

(+).((.).map)

(+) :: (Num a) => a ->http://open.spotify.com/track/4rTtuM4LOw7AbHdlaRVbQx (a -> a)
(.).map :: (e->f) -> ((b->[e]) -> b -> [f])
(.) :: (h->i) -> (g->h) -> g -> i

h = a = (b->[e]) -> b -> [f]
i = a -> a
g = e -> f

i = ((b->[e]) -> b -> [f]) -> ((b->[e]) -> b -> [f])
g -> i = (e -> f) -> ((b->[e]) -> b -> [f]) -> (b->[e]) -> b -> [f]


foldr (+).(.).map

(+).(.).map :: Num ((b->[e]) -> b -> [f]) => (e -> f) -> ((b->[e]) -> b -> [f]) -> (b->[e]) -> b -> [f]
foldr :: (g -> h -> h) -> (h -> [g] -> h)

g -> h -> h = (e -> f) -> ((b->[e]) -> b -> [f]) -> (b->[e]) -> b -> [f]
g = (e->f)
h = (b->[e]) -> b -> [f]

h -> [g] -> h = ((b->[e]) -> b -> [f]) - > [e->f] -> (b->[e]) -> b -> [f]

foldr (+).(.).map :: Num ((b->[e]) -> b -> [f]) => ((b->[e]) -> b -> [f]) - > [e->f] -> (b->[e]) -> b -> [f]


2)(\x y z -> foldr z x y).map

foldr :: (a -> b -> b) -> b -> [a] -> b
(\x y z -> foldr z x y) :: b -> [a] -> (a -> b -> b) -> b
map :: (a->b) -> [a] ->[b]
(.) :: (b->c) -> (a->b) -> a -> c

(\x y z -> foldr z x y) :: b -> ([a] -> (a -> b -> b) -> b)
map :: (c->d) -> ([c] ->[d])
(.) :: (f->g) -> (e->f) -> e -> g

f = b = ([c] ->[d])
g = ([a] -> (a -> b -> b) -> b)
e = (c->d)

g = ([a] -> (a -> ([c] ->[d]) -> ([c] ->[d])) -> [c] ->[d])

e -> g = (c->d) -> [a] -> (a -> ([c] ->[d]) -> [c] ->[d]) -> [c] ->[d]

(\x y z -> foldr z x y).map :: (c->d) -> [a] -> (a -> ([c] ->[d]) -> [c] ->[d]) -> [c] ->[d]



3)map.((.) (foldr (++) (foldr (++) [] [[1], [2]])))

foldr :: (a -> b -> b) -> b -> [a] -> b
(++) :: [a] -> [a] -> [a]
(.) :: (b->c) -> (a->b) -> a -> c
map :: (a->b) -> [a] ->[b]

(foldr (++) [] [[1], [2]]) :: (Num a) => [a]


(foldr (++) (foldr (++) [] [[1], [2]]))

(foldr (++) [] [[1], [2]]) :: (Num c) => [c]
(++) :: [d] -> [d] -> [d]
foldr :: (a -> b -> b) -> b -> ([a] -> b)
a -> (b -> b) = [a] -> ([a] -> [a])
b = [c]
a = [a]
b = [a]
[a] -> b = [[a]] -> [a]
(foldr (++) (foldr (++) [] [[1], [2]])) :: Num a => [[a]] -> [a]


((.) (foldr (++) (foldr (++) [] [[1], [2]])))

(foldr (++) (foldr (++) [] [[1], [2]])) :: Num d => [[d]] -> [d]
(.) :: (b->c) -> (a->b) -> a -> c
b -> c = [[d]] -> [d]
b = [[d]]
c = [d]
(a->b) -> a -> c = (a -> [[d]]) -> a -> [d]

((.) (foldr (++) (foldr (++) [] [[1], [2]]))) :: (Num d) => (a -> [[d]]) -> a -> [d]


map.((.) (foldr (++) (foldr (++) [] [[1], [2]])))

map :: (a->b) -> [a] ->[b]
((.) (foldr (++) (foldr (++) [] [[1], [2]]))) :: (Num d) => (c -> [[d]]) -> c -> [d]
(.) :: (f->g) -> (e->f) -> e -> g

 f = a->b = c -> [d]
 a = c
 b = [d]
 e = c -> [[d]]
 g = [a] -> [b]

 e -> g = (c -> [[d]]) -> [c] ->[[d]]

 map.((.) (foldr (++) (foldr (++) [] [[1], [2]]))) :: (Num d) => (c -> [[d]]) -> [c] ->[[d]]



4)(foldr).(.)$(!!)
foldr :: (a -> b -> b) -> b -> [a] -> b
(.) :: (b->c) -> (a->b) -> a -> c
($) :: (a -> b) -> a -> b
(!!) :: [a] -> Int -> a


(foldr).(.)

foldr :: (a -> b -> b) -> b -> [a] -> b
(.) :: (d->e) -> (c->d) -> c -> e
(.) :: (g->h) -> (f->g) -> f -> h
g = (a-> b -> b = (c -> d) -> c -> e
a = c -> d
b = c = e
f = d -> e
h = b -> [a] -> b

f -> h = (d -> b) -> b -> [b -> d] -> b
(foldr).(.) :: (d -> b) -> b -> [b -> d] -> b


(foldr).(.)$(!!)

(foldr).(.) :: (d -> b) -> b -> [b -> d] -> b
(!!) :: [c] -> Int -> c
($) :: (f -> g) -> f -> g

f -> g = (d -> b) -> b -> [b -> d] -> b
f = d -> b = [c] -> Int -> c
d = [c]
b = Int -> c
g = b -> [b -> d] -> b

g = (Int -> c) -> [(Int -> c) -> [c]] -> Int -> c

(foldr).(.)$(!!) :: (Int -> c) -> [(Int -> c) -> [c]] -> Int -> c









